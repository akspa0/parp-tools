using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace WoWToolbox.Core.v2.Foundation.PM4
{
    /// <summary>
    /// Enhanced OBJ exporter that replicates the legacy WCAnalyzer behaviour using the new Core.v2 PM4File model
    /// (MSPV/MSVI etc). Only geometry export is currently implemented – additional chunks such as MPRL position
    /// data will be wired once their models exist in Core.v2.
    /// </summary>
    public static class Pm4EnhancedObjExporter
    {
        private static readonly Regex CoordRegex = new Regex("_(\\d+)_(\\d+)", RegexOptions.Compiled);

        /// <summary>
        /// Export the supplied PM4 file to an OBJ with as-close-as-possible parity to the legacy implementation.
        /// </summary>
        /// <param name="pm4">Loaded PM4File instance (must contain MSPV + MSVI).</param>
        /// <param name="destinationPath">The target .obj path (directory will be created).</param>
        /// <returns></returns>
        public static async Task ExportAsync(PM4File pm4, string destinationPath)
        {
            if (pm4 == null) throw new ArgumentNullException(nameof(pm4));
            if (pm4.MSPV == null || pm4.MSPV.Vertices.Count == 0)
                throw new InvalidOperationException("PM4 contains no MSPV vertices");
            if (pm4.MSVI == null || pm4.MSVI.Indices.Count == 0)
                throw new InvalidOperationException("PM4 contains no MSVI indices");

            Directory.CreateDirectory(Path.GetDirectoryName(destinationPath)!);

            var sb = new StringBuilder();
            string baseName = Path.GetFileNameWithoutExtension(destinationPath);
            sb.AppendLine("# OBJ generated by Core.v2 Pm4EnhancedObjExporter");
            sb.AppendLine("o " + baseName);

            // vertices – keep WoW coordinate system (Y up)
            foreach (var v in pm4.MSPV.Vertices)
            {
                sb.AppendLine($"v {v.X.ToString(CultureInfo.InvariantCulture)} {v.Y.ToString(CultureInfo.InvariantCulture)} {v.Z.ToString(CultureInfo.InvariantCulture)}");
            }
            sb.AppendLine();

            // faces (triangle list)
            for (int i = 0; i < pm4.MSVI.Indices.Count; i += 3)
            {
                // +1 for OBJ indexing
                uint a = pm4.MSVI.Indices[i] + 1;
                uint b = pm4.MSVI.Indices[i + 1] + 1;
                uint c = pm4.MSVI.Indices[i + 2] + 1;
                sb.AppendLine($"f {a} {b} {c}");
            }

            await File.WriteAllTextAsync(destinationPath, sb.ToString());
        }

        /// <summary>
        /// Utility to pull X/Y tile coordinates from a typical PM4 filename such as "development_00_31.pm4".
        /// </summary>
        public static (int x, int y) ParseCoords(string fileName)
        {
            if (string.IsNullOrWhiteSpace(fileName)) return (-1, -1);
            var m = CoordRegex.Match(fileName);
            if (m.Success && int.TryParse(m.Groups[1].Value, out int x) && int.TryParse(m.Groups[2].Value, out int y))
                return (x, y);
            return (-1, -1);
        }
    }
}
