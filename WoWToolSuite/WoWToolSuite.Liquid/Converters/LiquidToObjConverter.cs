using System;
using System.Collections.Generic;
using System.IO;
using System.Numerics;
using System.Text;
using WowToolSuite.Liquid.Models;

namespace WowToolSuite.Liquid.Converters
{
    public class LiquidToObjConverter
    {
        private readonly List<Vector3> _vertices = new();
        private readonly List<Vector2> _texCoords = new();
        private readonly List<(int v1, int v2, int v3)> _faces = new();
        private readonly LiquidFile _liquidFile;
        private readonly LiquidFile? _wlqFile;

        public LiquidToObjConverter(LiquidFile liquidFile, LiquidFile? wlqFile = null)
        {
            _liquidFile = liquidFile;
            _wlqFile = wlqFile;
        }

        public void ConvertToObj(string outputPath, bool verbose = false)
        {
            if (verbose)
            {
                Console.WriteLine($"Converting {(_liquidFile.IsWlm ? "WLM" : "WLW")} file to OBJ: {_liquidFile.FilePath}");
            }

            ProcessLiquidFile(_liquidFile, verbose);
            if (_wlqFile != null)
            {
                ProcessLiquidFile(_wlqFile, verbose);
            }

            WriteObjFile(outputPath, verbose);
            WriteMtlFile(Path.ChangeExtension(outputPath, ".mtl"), verbose);
        }

        private void ProcessLiquidFile(LiquidFile file, bool verbose)
        {
            foreach (var block in file.Blocks)
            {
                int baseVertexIndex = _vertices.Count;
                int baseTexCoordIndex = _texCoords.Count;

                // Add vertices and texture coordinates
                for (int i = 0; i < 16; i++)
                {
                    var vertex = block.Vertices[i];
                    // Convert from WoW coordinate system to OBJ coordinate system
                    _vertices.Add(new Vector3(vertex.X, vertex.Z, -vertex.Y));

                    // Calculate texture coordinates (0 to 1 across the grid)
                    float u = (i % 4) / 3.0f;
                    float v = (i / 4) / 3.0f;
                    _texCoords.Add(new Vector2(u, v));
                }

                // Generate faces for the 4x4 grid
                // The grid is laid out like this (vertex indices):
                // 12 13 14 15
                //  8  9 10 11
                //  4  5  6  7
                //  0  1  2  3
                for (int row = 0; row < 3; row++)
                {
                    for (int col = 0; col < 3; col++)
                    {
                        int bottomLeft = baseVertexIndex + row * 4 + col;
                        int bottomRight = bottomLeft + 1;
                        int topLeft = bottomLeft + 4;
                        int topRight = topLeft + 1;

                        // First triangle (counter-clockwise winding)
                        _faces.Add((bottomLeft, topLeft, topRight));
                        // Second triangle (counter-clockwise winding)
                        _faces.Add((bottomLeft, topRight, bottomRight));
                    }
                }
            }
        }

        private void WriteObjFile(string objPath, bool verbose)
        {
            if (verbose)
            {
                Console.WriteLine($"Writing OBJ file: {objPath}");
            }

            using var writer = new StreamWriter(objPath);
            var mtlName = Path.GetFileNameWithoutExtension(objPath) + ".mtl";

            writer.WriteLine("# Generated by WowToolSuite.Liquid");
            writer.WriteLine($"mtllib {mtlName}");
            writer.WriteLine();

            // Write vertices
            foreach (var v in _vertices)
            {
                writer.WriteLine($"v {v.X:F6} {v.Y:F6} {v.Z:F6}");
            }
            writer.WriteLine();

            // Write texture coordinates
            foreach (var vt in _texCoords)
            {
                writer.WriteLine($"vt {vt.X:F6} {vt.Y:F6}");
            }
            writer.WriteLine();

            // Write material
            writer.WriteLine($"usemtl {_liquidFile.Header.LiquidTypeString}");
            writer.WriteLine("s 1"); // Enable smooth shading

            // Write faces (OBJ uses 1-based indices)
            foreach (var face in _faces)
            {
                writer.WriteLine($"f {face.v1 + 1}/{face.v1 + 1} {face.v2 + 1}/{face.v2 + 1} {face.v3 + 1}/{face.v3 + 1}");
            }
        }

        private void WriteMtlFile(string mtlPath, bool verbose)
        {
            if (verbose)
            {
                Console.WriteLine($"Writing MTL file: {mtlPath}");
            }

            var sb = new StringBuilder();
            sb.AppendLine($"newmtl {_liquidFile.Header.LiquidTypeString}");
            sb.AppendLine("Ka 1.000 1.000 1.000");
            sb.AppendLine("Kd 1.000 1.000 1.000");
            sb.AppendLine("Ks 0.000 0.000 0.000");
            sb.AppendLine("d 0.8"); // Make water slightly transparent
            sb.AppendLine("illum 2");
            sb.AppendLine($"map_Kd {_liquidFile.Header.TextureFilename}");

            File.WriteAllText(mtlPath, sb.ToString());
        }
    }
} 